---
- name: "Pre Configuration"
  hosts: webservers:!building
  remote_user: "{{common_user}}"
  gather_facts: False # notifying Slack
  tasks:
    - name: "Notify Slack of configuration changes"
      local_action: slack
        token="{{ slack.token }}"
        channel="{{ slack.channel }}"
        msg="{{app_environment|title}} deployment - {{play_hosts|length}} machines"
      tags: deploy
      run_once: True
      when: (app_environment | default('vagrant') != 'vagrant') and 'autoscale' not in groups

    - name: "Notify Slack of Auto-Scaling"
      local_action: slack
        token="{{ slack.token }}"
        channel="{{ slack.channel }}"
        msg="AutoScale - (begin) increasing web machines by 1"
      tags: deploy
      run_once: True
      when: ('autoscale' in groups) and ('vagrant' not in groups)

    - name: "Disabling Auto-scaling during configuration."
      command: "aws autoscaling suspend-processes --auto-scaling-group-name '{{ aws_asg.name }}' --scaling-processes Launch Terminate HealthCheck"
      run_once: True
      when: ('autoscale' not in groups) and ('vagrant' not in groups)

- name: "Remove any (local) known hosts already for the given box"
  hosts: webservers:&vagrant
  gather_facts: no
  tasks:
    - name: "Remove KNOWN_HOSTS"
      local_action: command ssh-keygen -R '{{item}}'
      with_items:
        - "{{ansible_ssh_host}}"
        - "[{{ansible_ssh_host}}]:{{ansible_ssh_port}}"
      tags: vagrant_data_import

- name: "Bootstrap Servers"
  serial: 2
  hosts: webservers:!building
  remote_user: "{{bootstrap_user}}"
  roles:
    - { role: common, tags: common }
    - { role: aws_tools, tags: aws_tools }

- name: "Setup Database (vagrant)"
  hosts: webservers:&vagrant
  remote_user: "{{common_user}}"
  roles:
    - { role: db, tags: db }

- name: "Setup Servers"
  serial: 2
  hosts: webservers:!building
  remote_user: "{{common_user}}"
  pre_tasks:
    - name: "Gathering ec2 facts"
      ec2_facts:
      when: app_environment != "vagrant"
      tags: deploy
    - name: "De-Register Instance from LB"
      local_action: ec2_elb
      args:
        instance_id: "{{ansible_ec2_instance_id}}"
        ec2_elbs: "{{aws_lb.name}}"
        region: "{{aws_region}}"
        state: "absent"
        wait: yes
        wait_timeout: 330
      ignore_errors: yes
      when: app_environment != "vagrant"
      tags: deploy
    - name: "Stopping NGINX if re-provisioning server"
      action: service name=nginx pattern=/etc/init.d/nginx state=stopped
      sudo: true
      ignore_errors: yes
      when: app_environment != "vagrant"
      tags: deploy
  roles:
    - { role: phantomjs, tags: phantomjs, sudo: true }
    - { role: newrelic, tags: newrelic, sudo: true, when: app_environment != 'vagrant' }
    - { role: monit, tags: monit, sudo: true }
    - { role: nginx, tags: nginx, sudo: true }
    - { role: node, tags: node }
    - { role: pgbouncer, tags: pgbouncer, sudo: true }
    - { role: venv, tags: venv }
    - { role: uwsgi, tags: uwsgi }
    - { role: web, tags: web_application }
  post_tasks:
    - name: "Register Instance on LB"
      local_action: ec2_elb
      args:
        instance_id: "{{ansible_ec2_instance_id}}"
        ec2_elbs: "{{aws_lb.name}}"
        region: "{{aws_region}}"
        state: "present"
        wait: yes
        wait_timeout: 330
      ignore_errors: yes
      when: app_environment != "vagrant"
      tags: deploy

- name: "Post Configuration"
  hosts: webservers:!building
  remote_user: "{{common_user}}"
  gather_facts: False # notifying Slack
  tasks:
    - name: "Notify Slack of configuration changes"
      local_action: slack
        token="{{ slack.token }}"
        channel="{{ slack.channel }}"
        msg="{{app_environment|title}} deployment complete. ({{play_hosts|length}} machines were updated)"
      tags: deploy
      run_once: true
      when: (app_environment | default('vagrant') != 'vagrant') and 'autoscale' not in groups

    - name: "Notify Slack of Auto-Scaling"
      local_action: slack
        token="{{ slack.token }}"
        channel="{{ slack.channel }}"
        msg="AutoScale - (end) increased web machines by 1"
      tags: deploy
      run_once: True
      when: ('autoscale' in groups) and ('vagrant' not in groups)

    - name: "Re-Enable Auto-scaling for after configuration."
      command: "aws autoscaling resume-processes --auto-scaling-group-name '{{ aws_asg.name }}' --scaling-processes Launch Terminate HealthCheck"
      run_once: True
      when: ('autoscale' not in groups) and ('vagrant' not in groups)
