---
- name: "Check for Existing EC2 Instances"
  hosts: "building_{{app_environment}}"
  tasks:
    - name: Gather facts
      action: ec2_facts
      tags: ami
    - name: Add existing instance to launched groups
      local_action: add_host hostname="{{ansible_ec2_public_hostname}}" groups="{{app_environment}},launched"
      register: existing_instance
      tags: ami

- name: "Launch EC2 instance to image"
  hosts: localhost
  connection: local
  gather_facts: False

  tasks:
  - name: "Launch EC2 instance"
    action:
      module: ec2
      image: "{{ aws_base_image }}"
      instance_type: "{{aws_instance_type}}"
      state: present
      region: "{{ aws_region }}"
      key_name: "{{ aws_sshkey_name }}"
      group: "secondfunnel-{{app_environment}}"
      wait: true
      instance_tags:
        Name: "secondfunnel-{{app_environment}}"
        Environment: "{{app_environment}}"
        Building: "{{app_environment}}-AMI"
    register: ec2
    when: groups['launched'] is not defined

  - name: Add new instance to host groups
    local_action: add_host hostname="{{item.public_dns_name}}" groups="{{app_environment}},launched"
    with_items: ec2.instances
    when: groups['launched'] is not defined

  - name: Wait for SSH to come up
    local_action: wait_for host="{{item.public_dns_name}}" port=22 delay=20 timeout=320 state=started
    with_items: ec2.instances
    when: groups['launched'] is not defined

- name: "Bootstrap Servers"
  serial: 2
  hosts: launched
  roles:
    - common

- name: "Setup Servers"
  serial: 2
  hosts: launched
  remote_user: "{{common_user}}"
  roles:
    - { role: newrelic, tags: newrelic, sudo: true }
    - { role: monit, tags: monit, sudo: true }
    - { role: nginx, tags: nginx, sudo: true }
    - { role: node, tags: node }
    - { role: pgbouncer, tags: pgbouncer, sudo: true }
    - web
    - { role: uwsgi, tags: uwsgi }

- name: "Terminate instances"
  hosts: launched
  tasks:
    - name: Gather facts
      action: ec2_facts
      tags: ami
    - name: "Save the AMI"
      local_action: ec2_ami 
        aws_access_key="{{aws_access_key_id}}"
        aws_secret_key="{{aws_secret_key}}"
        wait=yes
        region="{{aws_region}}"
        name="secondfunnel-{{app_environment}}-web {{ansible_date_time.date}}"
        description="SecondFunnel {{app_environment|title}} Environment - Web Server"
        instance_id="{{ansible_ec2_instance_id}}"
      tags: ami

    - name: "Terminate instances that were previously launched"
      local_action: ec2
        state='absent'
        instance_ids='{{ ansible_ec2_instance_id }}'
        region='{{aws_region}}'
      tags: ami
